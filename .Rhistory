pkg = c('magrittr', 'quantmod', 'rvest', 'httr', 'jsonlite',
'readr', 'readxl', 'stringr', 'lubridate', 'dplyr',
'tidyr', 'ggplot2', 'corrplot', 'dygraphs',
'highcharter', 'plotly', 'PerformanceAnalytics',
'nloptr', 'quadprog', 'RiskPortfolios', 'cccp',
'timetk', 'broom', 'stargazer', 'timeSeries')
;
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
install.packages(c("backports", "broom", "cowplot", "data.table", "DescTools", "diffobj", "DT", "future", "ggrepel", "gh", "globals", "htmlwidgets", "isoband", "jsonlite", "lme4", "mongolite", "parallelly", "pbkrtest", "pkgbuild", "processx", "ps", "RcppEigen", "rlang", "rmarkdown", "slam", "testthat", "tidymodels", "tinytex", "usethis", "vctrs", "xfun"))
install.packages(c("backports", "diffobj", "hexbin", "RSQLite"))
pkg = c('magrittr', 'quantmod', 'rvest', 'httr', 'jsonlite',
'readr', 'readxl', 'stringr', 'lubridate', 'dplyr',
'tidyr', 'ggplot2', 'corrplot', 'dygraphs',
'highcharter', 'plotly', 'PerformanceAnalytics',
'nloptr', 'quadprog', 'RiskPortfolios', 'cccp',
'timetk', 'broom', 'stargazer', 'timeSeries')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
install.packages(c("backports", "diffobj", "hexbin", "RSQLite", "sp"))
install.packages(new.pkg, dependencies = TRUE)}
pkg = c('magrittr', 'quantmod', 'rvest', 'httr', 'jsonlite',
'readr', 'readxl', 'stringr', 'lubridate', 'dplyr',
'tidyr', 'ggplot2', 'corrplot', 'dygraphs',
'highcharter', 'plotly', 'PerformanceAnalytics',
'nloptr', 'quadprog', 'RiskPortfolios', 'cccp',
'timetk', 'broom', 'stargazer', 'timeSeries')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
require(installr)
check.for.updates.R()
install.R()
x = c(0.3078, 0.2577, 0.5523, 0.0564, 0.4685,
0.4838, 0.8124, 0.3703, 0.5466, 0.1703)
x1 = log(x)
x2 = diff(x1)
x3 = exp(x2)
round(x3, 2)
# 괄호를 통해 감싸기
round(exp(diff(log(x))), 2)
requrie(magrittr)
require(magrittr)
x %>% log() %>% diff() %>% exp() %>% round(., 2)
number = data.frame(1,2,3,"4", 5, stringsAsFactors = FALSE)
str(number)
for (i in number) {
print(i^2)
}
for (i in number) {
tryCatch({
print(i^2)
}, error = function(e) {
print(paste('Error:', i))
})
}
